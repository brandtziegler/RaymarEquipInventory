// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace RaymarEquipmentInventory.Models;

public partial class RaymarInventoryDBContext : DbContext
{
    public RaymarInventoryDBContext(DbContextOptions<RaymarInventoryDBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<BillingInformation> BillingInformations { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<DiAllowedKeyword> DiAllowedKeywords { get; set; }

    public virtual DbSet<DiCandidateKeyword> DiCandidateKeywords { get; set; }

    public virtual DbSet<DiCategory> DiCategories { get; set; }

    public virtual DbSet<DiItemKeyword> DiItemKeywords { get; set; }

    public virtual DbSet<DiPlace> DiPlaces { get; set; }

    public virtual DbSet<DiPlaceAlias> DiPlaceAliases { get; set; }

    public virtual DbSet<DiStopword> DiStopwords { get; set; }

    public virtual DbSet<Document> Documents { get; set; }

    public virtual DbSet<DocumentType> DocumentTypes { get; set; }

    public virtual DbSet<DriveFileMetadatum> DriveFileMetadata { get; set; }

    public virtual DbSet<FailedSyncLog> FailedSyncLogs { get; set; }

    public virtual DbSet<FlatLabour> FlatLabours { get; set; }

    public virtual DbSet<GoogleDriveFolder> GoogleDriveFolders { get; set; }

    public virtual DbSet<HourlyLabourType> HourlyLabourTypes { get; set; }

    public virtual DbSet<IncomeAccount> IncomeAccounts { get; set; }

    public virtual DbSet<InventoryDatum> InventoryData { get; set; }

    public virtual DbSet<InventoryDocument> InventoryDocuments { get; set; }

    public virtual DbSet<Labour> Labours { get; set; }

    public virtual DbSet<LabourType> LabourTypes { get; set; }

    public virtual DbSet<MileageAndTime> MileageAndTimes { get; set; }

    public virtual DbSet<NextWorkOrderNumber> NextWorkOrderNumbers { get; set; }

    public virtual DbSet<PartsDocument> PartsDocuments { get; set; }

    public virtual DbSet<PartsUsed> PartsUseds { get; set; }

    public virtual DbSet<Pdfdocument> Pdfdocuments { get; set; }

    public virtual DbSet<Pdftag> Pdftags { get; set; }

    public virtual DbSet<Person> People { get; set; }

    public virtual DbSet<PlaceholderDocument> PlaceholderDocuments { get; set; }

    public virtual DbSet<RegularLabour> RegularLabours { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<RolePermission> RolePermissions { get; set; }

    public virtual DbSet<ServiceDescription> ServiceDescriptions { get; set; }

    public virtual DbSet<Technician> Technicians { get; set; }

    public virtual DbSet<TechnicianExperience> TechnicianExperiences { get; set; }

    public virtual DbSet<TechnicianLicence> TechnicianLicences { get; set; }

    public virtual DbSet<TechnicianWorkOrder> TechnicianWorkOrders { get; set; }

    public virtual DbSet<VehicleDatum> VehicleData { get; set; }

    public virtual DbSet<VehicleHistory> VehicleHistories { get; set; }

    public virtual DbSet<VehicleTravelLog> VehicleTravelLogs { get; set; }

    public virtual DbSet<VehicleWorkOrder> VehicleWorkOrders { get; set; }

    public virtual DbSet<VwPartsUsedWithInventory> VwPartsUsedWithInventories { get; set; }

    public virtual DbSet<VwRole> VwRoles { get; set; }

    public virtual DbSet<VwRolesMin> VwRolesMins { get; set; }

    public virtual DbSet<VwWorkOrderCard> VwWorkOrderCards { get; set; }

    public virtual DbSet<VwWorkOrderStatusWithType> VwWorkOrderStatusWithTypes { get; set; }

    public virtual DbSet<VwWorkOrderTechnician> VwWorkOrderTechnicians { get; set; }

    public virtual DbSet<WorkOrderCounter> WorkOrderCounters { get; set; }

    public virtual DbSet<WorkOrderFee> WorkOrderFees { get; set; }

    public virtual DbSet<WorkOrderSheet> WorkOrderSheets { get; set; }

    public virtual DbSet<WorkOrderStatus> WorkOrderStatuses { get; set; }

    public virtual DbSet<WorkOrderStatusSetup> WorkOrderStatusSetups { get; set; }

    public virtual DbSet<WorkOrderSyncEvent> WorkOrderSyncEvents { get; set; }

    public virtual DbSet<WorkOrderSyncLog> WorkOrderSyncLogs { get; set; }

    public virtual DbSet<WorkOrderType> WorkOrderTypes { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<BillingInformation>(entity =>
        {
            entity.HasKey(e => e.BillingId).HasName("PK__BillingI__F1656D132D42E93A");

            entity.ToTable("BillingInformation");

            entity.Property(e => e.BillingId).HasColumnName("BillingID");
            entity.Property(e => e.BillingPersonId).HasColumnName("BillingPersonID");
            entity.Property(e => e.CustPath)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.JobSiteCity).HasMaxLength(100);
            entity.Property(e => e.Pono)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PONo");
            entity.Property(e => e.SheetId).HasColumnName("SheetID");
            entity.Property(e => e.UnitNo)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.WorkDescription).IsUnicode(false);
            entity.Property(e => e.WorkLocation)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.BillingPerson).WithMany(p => p.BillingInformations)
                .HasForeignKey(d => d.BillingPersonId)
                .HasConstraintName("FK_Billing_Persons");

            entity.HasOne(d => d.Customer).WithMany(p => p.BillingInformations)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK_BillingInformation_Customers");

            entity.HasOne(d => d.Sheet).WithMany(p => p.BillingInformations)
                .HasForeignKey(d => d.SheetId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BillingInformation_WorkOrderSheet");
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.HasKey(e => e.CustomerId).HasName("PK_Customers");

            entity.ToTable("Customer");

            entity.HasIndex(e => e.Id, "UQ_Customers_ID").IsUnique();

            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.AccountNumber).HasMaxLength(50);
            entity.Property(e => e.Company).HasMaxLength(255);
            entity.Property(e => e.CustomerName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Email).HasMaxLength(255);
            entity.Property(e => e.FirstName).HasMaxLength(100);
            entity.Property(e => e.FullAddress).IsUnicode(false);
            entity.Property(e => e.FullName).HasMaxLength(255);
            entity.Property(e => e.Id)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("ID");
            entity.Property(e => e.JobProjectedEndDate).HasColumnType("date");
            entity.Property(e => e.JobStartDate).HasColumnType("date");
            entity.Property(e => e.JobStatus).HasMaxLength(100);
            entity.Property(e => e.JobType).HasMaxLength(100);
            entity.Property(e => e.JobTypeId).HasMaxLength(50);
            entity.Property(e => e.LastName).HasMaxLength(100);
            entity.Property(e => e.ParentId)
                .HasMaxLength(50)
                .HasColumnName("ParentID");
            entity.Property(e => e.ParentName).HasMaxLength(255);
            entity.Property(e => e.Phone).HasMaxLength(50);

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasPrincipalKey(p => p.Id)
                .HasForeignKey(d => d.ParentId)
                .HasConstraintName("FK_ParentCustomer");
        });

        modelBuilder.Entity<DiAllowedKeyword>(entity =>
        {
            entity.HasKey(e => e.AllowedKeywordId).HasName("PK__DI_Allow__978020BFA19A871E");

            entity.ToTable("DI_AllowedKeywords");

            entity.HasIndex(e => e.CategoryId, "IX_DI_AllowedKeywords_CategoryID");

            entity.HasIndex(e => new { e.CategoryId, e.Keyword }, "UX_DI_AllowedKeywords_Category_Keyword").IsUnique();

            entity.Property(e => e.AllowedKeywordId).HasColumnName("AllowedKeywordID");
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.CreatedAtUtc)
                .HasPrecision(0)
                .HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.Keyword)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Notes).HasMaxLength(400);
            entity.Property(e => e.UpdatedAtUtc)
                .HasPrecision(0)
                .HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.Category).WithMany(p => p.DiAllowedKeywords)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DI_AllowedKeywords_Categories");
        });

        modelBuilder.Entity<DiCandidateKeyword>(entity =>
        {
            entity.HasKey(e => e.CandidateKeywordId).HasName("PK__DI_Candi__81EE7DEB5C31A464");

            entity.ToTable("DI_CandidateKeywords", tb => tb.HasTrigger("TR_DI_CandidateKeywords_SetUpdatedAt"));

            entity.HasIndex(e => e.SeenCount, "IX_DI_CandidateKeywords_SeenCount").IsDescending();

            entity.HasIndex(e => new { e.Status, e.LastSeenAtUtc }, "IX_DI_CandidateKeywords_Status_LastSeen").IsDescending(false, true);

            entity.HasIndex(e => new { e.CategoryId, e.Keyword }, "UX_DI_CandidateKeywords_Category_Keyword").IsUnique();

            entity.Property(e => e.CandidateKeywordId).HasColumnName("CandidateKeywordID");
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.Confidence)
                .HasDefaultValueSql("((0.5000))")
                .HasColumnType("decimal(5, 4)");
            entity.Property(e => e.CreatedAtUtc)
                .HasPrecision(0)
                .HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.FirstSeenAtUtc)
                .HasPrecision(0)
                .HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.Keyword)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.LastSeenAtUtc)
                .HasPrecision(0)
                .HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.Notes).HasMaxLength(400);
            entity.Property(e => e.SeenCount).HasDefaultValueSql("((1))");
            entity.Property(e => e.SourcePlaceId).HasColumnName("SourcePlaceID");
            entity.Property(e => e.UpdatedAtUtc)
                .HasPrecision(0)
                .HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.Category).WithMany(p => p.DiCandidateKeywords)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DI_CandidateKeywords_Categories");

            entity.HasOne(d => d.SourcePlace).WithMany(p => p.DiCandidateKeywords)
                .HasForeignKey(d => d.SourcePlaceId)
                .HasConstraintName("FK_DI_CandidateKeywords_Places");
        });

        modelBuilder.Entity<DiCategory>(entity =>
        {
            entity.HasKey(e => e.CategoryId).HasName("PK__DI_Categ__19093A2BF07802CD");

            entity.ToTable("DI_Categories", tb => tb.HasTrigger("TR_DI_Categories_SetUpdatedAt"));

            entity.HasIndex(e => e.CategoryName, "UX_DI_Categories_CategoryName").IsUnique();

            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.CategoryName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.CreatedAtUtc)
                .HasPrecision(0)
                .HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.Description).HasMaxLength(400);
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.UpdatedAtUtc)
                .HasPrecision(0)
                .HasDefaultValueSql("(sysutcdatetime())");
        });

        modelBuilder.Entity<DiItemKeyword>(entity =>
        {
            entity.HasKey(e => e.ItemKeywordId).HasName("PK__DI_ItemK__F118A7DAD7615848");

            entity.ToTable("DI_ItemKeywords");

            entity.HasIndex(e => e.CategoryId, "IX_DI_ItemKeywords_CategoryID");

            entity.HasIndex(e => new { e.CategoryId, e.Keyword }, "UX_DI_ItemKeywords_Category_Keyword").IsUnique();

            entity.Property(e => e.ItemKeywordId).HasColumnName("ItemKeywordID");
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.CreatedAtUtc)
                .HasPrecision(0)
                .HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.Keyword)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Notes).HasMaxLength(400);
            entity.Property(e => e.UpdatedAtUtc)
                .HasPrecision(0)
                .HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.Category).WithMany(p => p.DiItemKeywords)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DI_ItemKeywords_Categories");
        });

        modelBuilder.Entity<DiPlace>(entity =>
        {
            entity.HasKey(e => e.PlaceId).HasName("PK__DI_Place__D5222B4E48F3BE3B");

            entity.ToTable("DI_Places");

            entity.HasIndex(e => e.CategoryId, "IX_DI_Places_CategoryID");

            entity.HasIndex(e => new { e.CategoryId, e.PlaceName }, "UX_DI_Places_Category_PlaceName").IsUnique();

            entity.Property(e => e.PlaceId).HasColumnName("PlaceID");
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.CreatedAtUtc)
                .HasPrecision(0)
                .HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.Notes).HasMaxLength(400);
            entity.Property(e => e.PlaceName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.UpdatedAtUtc)
                .HasPrecision(0)
                .HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.Category).WithMany(p => p.DiPlaces)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DI_Places_Categories");
        });

        modelBuilder.Entity<DiPlaceAlias>(entity =>
        {
            entity.HasKey(e => e.PlaceAliasId).HasName("PK__DI_Place__F0FC9FF96DE77F62");

            entity.ToTable("DI_PlaceAliases", tb => tb.HasTrigger("TR_DI_PlaceAliases_SetUpdatedAt"));

            entity.HasIndex(e => e.Alias, "IX_DI_PlaceAliases_Alias");

            entity.HasIndex(e => new { e.PlaceId, e.Alias }, "UX_DI_PlaceAliases_Place_Alias").IsUnique();

            entity.Property(e => e.PlaceAliasId).HasColumnName("PlaceAliasID");
            entity.Property(e => e.Alias)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.CreatedAtUtc)
                .HasPrecision(0)
                .HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.Notes).HasMaxLength(400);
            entity.Property(e => e.PlaceId).HasColumnName("PlaceID");
            entity.Property(e => e.UpdatedAtUtc)
                .HasPrecision(0)
                .HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.Place).WithMany(p => p.DiPlaceAliases)
                .HasForeignKey(d => d.PlaceId)
                .HasConstraintName("FK_DI_PlaceAliases_Places");
        });

        modelBuilder.Entity<DiStopword>(entity =>
        {
            entity.HasKey(e => e.StopwordId).HasName("PK__DI_Stopw__6A42C9DEE8B385F6");

            entity.ToTable("DI_Stopwords");

            entity.HasIndex(e => e.Word, "UX_DI_Stopwords_Word").IsUnique();

            entity.Property(e => e.StopwordId).HasColumnName("StopwordID");
            entity.Property(e => e.CreatedAtUtc)
                .HasPrecision(0)
                .HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.Notes).HasMaxLength(400);
            entity.Property(e => e.UpdatedAtUtc)
                .HasPrecision(0)
                .HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.Word)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<Document>(entity =>
        {
            entity.HasKey(e => e.DocumentId).HasName("PK__Document__1ABEEF6F3CB9DA3E");

            entity.Property(e => e.DocumentId).HasColumnName("DocumentID");
            entity.Property(e => e.DocumentTypeId).HasColumnName("DocumentTypeID");
            entity.Property(e => e.FileName)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.FileUrl)
                .IsRequired()
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("FileURL");
            entity.Property(e => e.SheetId).HasColumnName("SheetID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UploadedBy)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.DocumentType).WithMany(p => p.Documents)
                .HasForeignKey(d => d.DocumentTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Documents_DocumentTypes");

            entity.HasOne(d => d.Sheet).WithMany(p => p.Documents)
                .HasForeignKey(d => d.SheetId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Documents_WorkOrderSheet");
        });

        modelBuilder.Entity<DocumentType>(entity =>
        {
            entity.HasKey(e => e.DocumentTypeId).HasName("PK__Document__DBA390C1C2B39F2E");

            entity.Property(e => e.DocumentTypeId).HasColumnName("DocumentTypeID");
            entity.Property(e => e.DocumentTypeName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MimeType)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DriveFileMetadatum>(entity =>
        {
            entity.HasKey(e => e.MetadataId).HasName("PK__DriveFil__66106FD9C917F7A0");

            entity.HasIndex(e => e.PdfTagId, "IX_DriveFileMetadata_PdfTagId");

            entity.HasIndex(e => e.DriveFileId, "UQ_DriveFile").IsUnique();

            entity.Property(e => e.DriveFileId)
                .IsRequired()
                .HasMaxLength(128);
            entity.Property(e => e.FolderId).HasMaxLength(128);
            entity.Property(e => e.IsTemplateFile)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.LastModUser).HasMaxLength(200);
            entity.Property(e => e.LastSeenAt)
                .HasPrecision(2)
                .HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.Md5Checksum)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MimeType).HasMaxLength(200);
            entity.Property(e => e.ModifiedTime).HasPrecision(2);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(400);
            entity.Property(e => e.WebContentLink).HasMaxLength(1000);
            entity.Property(e => e.WebViewLink).HasMaxLength(1000);

            entity.HasOne(d => d.PdfTag).WithMany(p => p.DriveFileMetadata)
                .HasForeignKey(d => d.PdfTagId)
                .HasConstraintName("FK_DFM_PDFTags");
        });

        modelBuilder.Entity<FailedSyncLog>(entity =>
        {
            entity.HasKey(e => e.FailedSyncLogId).HasName("PK__FailedSy__A6F78217D919125B");

            entity.ToTable("FailedSyncLog");

            entity.Property(e => e.FailedSyncLogId).HasColumnName("FailedSyncLogID");
            entity.Property(e => e.Reason).IsRequired();
            entity.Property(e => e.SheetId).HasColumnName("SheetID");
            entity.Property(e => e.Timestamp)
                .HasPrecision(3)
                .HasDefaultValueSql("(sysutcdatetime())");
        });

        modelBuilder.Entity<FlatLabour>(entity =>
        {
            entity.HasKey(e => e.FlatLabourId).HasName("PK__FlatLabo__AEB1952A50FC06F6");

            entity.ToTable("FlatLabour");

            entity.Property(e => e.FlatLabourId).HasColumnName("FlatLabourID");
            entity.Property(e => e.FeeAndExpense)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LabourDescription)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LabourName)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LabourTypeId).HasColumnName("LabourTypeID");
            entity.Property(e => e.Price)
                .HasDefaultValueSql("((0.00))")
                .HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.LabourType).WithMany(p => p.FlatLabours)
                .HasForeignKey(d => d.LabourTypeId)
                .HasConstraintName("FK__FlatLabou__Labou__7DCDAAA2");
        });

        modelBuilder.Entity<GoogleDriveFolder>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__GoogleDr__3214EC071133B239");

            entity.HasIndex(e => new { e.FolderName, e.ParentFolderId }, "UQ_Folder").IsUnique();

            entity.HasIndex(e => e.FolderId, "UQ__GoogleDr__ACD7107EEF0C654A").IsUnique();

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.FolderId).HasMaxLength(255);
            entity.Property(e => e.FolderName).HasMaxLength(255);
            entity.Property(e => e.ParentFolderId).HasMaxLength(255);
        });

        modelBuilder.Entity<HourlyLabourType>(entity =>
        {
            entity.HasKey(e => e.LabourTypeId).HasName("PK__HourlyLa__57BD0EB26FFD85FC");

            entity.ToTable("HourlyLabourType");

            entity.Property(e => e.LabourTypeId).HasColumnName("LabourTypeID");
            entity.Property(e => e.LabourTypeDescription)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IncomeAccount>(entity =>
        {
            entity.HasKey(e => e.IncomeAccountId).HasName("PK__IncomeAc__B36A206EFC75E628");

            entity.ToTable("IncomeAccount");

            entity.Property(e => e.IncomeAccountId).HasColumnName("IncomeAccountID");
            entity.Property(e => e.AccountName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('Sales')");
        });

        modelBuilder.Entity<InventoryDatum>(entity =>
        {
            entity.HasKey(e => e.InventoryId).HasName("PK__Inventor__F5FDE6D30BA95700");

            entity.HasIndex(e => e.QuickBooksInvId, "IX_Unique_QuickBooksInvID")
                .IsUnique()
                .HasFilter("([QuickBooksInvID] IS NOT NULL)");

            entity.Property(e => e.InventoryId).HasColumnName("InventoryID");
            entity.Property(e => e.AverageCost).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Cost).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.IncomeAccountId).HasColumnName("IncomeAccountID");
            entity.Property(e => e.ItemName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LastRestockedDate).HasColumnType("datetime");
            entity.Property(e => e.ManufacturerPartNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.QuickBooksInvId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("QuickBooksInvID");
            entity.Property(e => e.SalesPrice).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.IncomeAccount).WithMany(p => p.InventoryData)
                .HasForeignKey(d => d.IncomeAccountId)
                .HasConstraintName("FK__Inventory__Incom__5FB337D6");
        });

        modelBuilder.Entity<InventoryDocument>(entity =>
        {
            entity.HasKey(e => e.InventoryDocumentId).HasName("PK__Inventor__1A4F64173D88C100");

            entity.ToTable("InventoryDocument");

            entity.Property(e => e.InventoryDocumentId).HasColumnName("InventoryDocumentID");
            entity.Property(e => e.DocumentTypeId).HasColumnName("DocumentTypeID");
            entity.Property(e => e.FileName)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.FileUrl)
                .IsRequired()
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("FileURL");
            entity.Property(e => e.InventoryId).HasColumnName("InventoryID");
            entity.Property(e => e.UploadDate).HasColumnType("datetime");
            entity.Property(e => e.UploadedBy)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.DocumentType).WithMany(p => p.InventoryDocuments)
                .HasForeignKey(d => d.DocumentTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InventoryDocuments_DocumentTypes");

            entity.HasOne(d => d.Inventory).WithMany(p => p.InventoryDocuments)
                .HasForeignKey(d => d.InventoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InventoryDocuments_InventoryData");
        });

        modelBuilder.Entity<Labour>(entity =>
        {
            entity.HasKey(e => e.LabourId).HasName("PK__Labour__74A96217720C8D93");

            entity.ToTable("Labour");

            entity.Property(e => e.LabourId).HasColumnName("LabourID");
            entity.Property(e => e.DateOfLabour).HasColumnType("date");
            entity.Property(e => e.FinishLabour).HasColumnType("datetime");
            entity.Property(e => e.FlatRateJobDescription)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OttotalHrs).HasColumnName("OTTotalHrs");
            entity.Property(e => e.OttotalMin).HasColumnName("OTTotalMin");
            entity.Property(e => e.StartLabour).HasColumnType("datetime");
            entity.Property(e => e.TechnicianWorkOrderId).HasColumnName("TechnicianWorkOrderID");
            entity.Property(e => e.WorkDescription)
                .HasMaxLength(250)
                .IsUnicode(false);

            entity.HasOne(d => d.TechnicianWorkOrder).WithMany(p => p.Labours)
                .HasForeignKey(d => d.TechnicianWorkOrderId)
                .HasConstraintName("FK_Labour_TechnicianWorkOrder");
        });

        modelBuilder.Entity<LabourType>(entity =>
        {
            entity.HasKey(e => e.LabourTypeId).HasName("PK__LabourTy__57BD0EB2BB52924E");

            entity.ToTable("LabourType");

            entity.Property(e => e.LabourTypeId).HasColumnName("LabourTypeID");
            entity.Property(e => e.LabourTypeDescription)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MileageAndTime>(entity =>
        {
            entity.HasKey(e => e.MilageTimeId).HasName("PK__MileageA__A0D5FCDE569629AC");

            entity.ToTable("MileageAndTime");

            entity.Property(e => e.MilageTimeId).HasColumnName("MilageTimeID");
            entity.Property(e => e.DateOfMileageTime).HasColumnType("date");
            entity.Property(e => e.FinishTravel).HasColumnType("datetime");
            entity.Property(e => e.SheetId).HasColumnName("SheetID");
            entity.Property(e => e.StartTravel).HasColumnType("datetime");
            entity.Property(e => e.TotalOthours).HasColumnName("TotalOTHours");
            entity.Property(e => e.TotalOtminutes).HasColumnName("TotalOTMinutes");

            entity.HasOne(d => d.Sheet).WithMany(p => p.MileageAndTimes)
                .HasForeignKey(d => d.SheetId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__MileageAn__Sheet__40058253");
        });

        modelBuilder.Entity<NextWorkOrderNumber>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__NextWork__3214EC073B381161");

            entity.ToTable("NextWorkOrderNumber");

            entity.Property(e => e.Wonumber).HasColumnName("WONumber");
        });

        modelBuilder.Entity<PartsDocument>(entity =>
        {
            entity.HasKey(e => e.PartsDocumentId).HasName("PK__PartsDoc__B8CA25B2925B0A13");

            entity.ToTable("PartsDocument");

            entity.Property(e => e.PartsDocumentId).HasColumnName("PartsDocumentID");
            entity.Property(e => e.AzureBlobPath).HasMaxLength(500);
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ExpensesFolderId).HasMaxLength(255);
            entity.Property(e => e.FileName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.FileUrl).HasMaxLength(500);
            entity.Property(e => e.ImagesFolderId).HasMaxLength(255);
            entity.Property(e => e.UploadDate).HasColumnType("datetime");
            entity.Property(e => e.UploadedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.WorkOrderFolderId).HasMaxLength(255);

            entity.HasOne(d => d.PartUsed).WithMany(p => p.PartsDocuments)
                .HasForeignKey(d => d.PartUsedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PartsDocument_PartsUsed");
        });

        modelBuilder.Entity<PartsUsed>(entity =>
        {
            entity.HasKey(e => e.PartUsedId).HasName("PK__PartsUse__F63FBD3DD8122046");

            entity.ToTable("PartsUsed");

            entity.Property(e => e.Deleted).HasDefaultValueSql("((0))");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.InventoryId).HasColumnName("InventoryID");
            entity.Property(e => e.Notes).IsUnicode(false);
            entity.Property(e => e.PartNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SheetId).HasColumnName("SheetID");
            entity.Property(e => e.UploadDate).HasColumnType("datetime");
            entity.Property(e => e.UploadedBy)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Inventory).WithMany(p => p.PartsUseds)
                .HasForeignKey(d => d.InventoryId)
                .HasConstraintName("FK_PartsUsed_InventoryData");

            entity.HasOne(d => d.Sheet).WithMany(p => p.PartsUseds)
                .HasForeignKey(d => d.SheetId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PartsUsed_WorkOrderSheet");
        });

        modelBuilder.Entity<Pdfdocument>(entity =>
        {
            entity.HasKey(e => e.PdfdocumentId).HasName("PK__PDFDocum__B6A0FD3A1C4482F5");

            entity.ToTable("PDFDocument");

            entity.Property(e => e.PdfdocumentId).HasColumnName("PDFDocumentID");
            entity.Property(e => e.AzureBlobPath).HasMaxLength(500);
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.DriveFileId)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DriveFileID");
            entity.Property(e => e.FileName)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.FileUrl)
                .IsRequired()
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.PdffolderId)
                .HasMaxLength(255)
                .HasColumnName("PDFFolderId");
            entity.Property(e => e.SheetId).HasColumnName("SheetID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UploadedBy)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('iPad App')");
            entity.Property(e => e.WorkOrderFolderId).HasMaxLength(255);

            entity.HasOne(d => d.Sheet).WithMany(p => p.Pdfdocuments)
                .HasForeignKey(d => d.SheetId)
                .HasConstraintName("FK_PDFDocument_WorkOrderSheet");
        });

        modelBuilder.Entity<Pdftag>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PDFTags__3214EC070C15E1AF");

            entity.ToTable("PDFTags");

            entity.Property(e => e.Categories).HasMaxLength(500);
            entity.Property(e => e.FileName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.LabourTypeId).HasColumnName("LabourTypeID");

            entity.HasOne(d => d.LabourType).WithMany(p => p.Pdftags)
                .HasForeignKey(d => d.LabourTypeId)
                .HasConstraintName("FK_PDFTags_LabourType");
        });

        modelBuilder.Entity<Person>(entity =>
        {
            entity.HasKey(e => e.PersonId).HasName("PK__Person__AA2FFB85FE5F2D9D");

            entity.ToTable("Person");

            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.FirstName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PhoneOne)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.RoleId).HasColumnName("RoleID");
            entity.Property(e => e.RoleName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StartDate).HasColumnType("datetime");

            entity.HasOne(d => d.Role).WithMany(p => p.People)
                .HasForeignKey(d => d.RoleId)
                .HasConstraintName("FK_Person_Role");
        });

        modelBuilder.Entity<PlaceholderDocument>(entity =>
        {
            entity.HasKey(e => e.FileId).HasName("PK__Placehol__6F0F989FB2AF5CE8");

            entity.ToTable("PlaceholderDocument");

            entity.Property(e => e.FileId).HasColumnName("FileID");
            entity.Property(e => e.DocumentTypeId).HasColumnName("DocumentTypeID");
            entity.Property(e => e.FileName)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.FileUrl)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("FileURL");
            entity.Property(e => e.UploadDate).HasColumnType("datetime");

            entity.HasOne(d => d.DocumentType).WithMany(p => p.PlaceholderDocuments)
                .HasForeignKey(d => d.DocumentTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PlaceholderDocuments_DocumentTypes");
        });

        modelBuilder.Entity<RegularLabour>(entity =>
        {
            entity.HasKey(e => e.LabourId).HasName("PK__RegularL__74A96217F243C2C3");

            entity.ToTable("RegularLabour");

            entity.Property(e => e.LabourId).HasColumnName("LabourID");
            entity.Property(e => e.DateLabourFinished).HasColumnType("datetime");
            entity.Property(e => e.DateLabourStarted).HasColumnType("datetime");
            entity.Property(e => e.DateOfLabor).HasColumnType("date");
            entity.Property(e => e.FinishLabor).HasColumnType("datetime");
            entity.Property(e => e.LabourTypeId).HasColumnName("LabourTypeID");
            entity.Property(e => e.StartLabor).HasColumnType("datetime");
            entity.Property(e => e.TechnicianWorkOrderId).HasColumnName("TechnicianWorkOrderID");
            entity.Property(e => e.TotalOthours).HasColumnName("TotalOTHours");
            entity.Property(e => e.TotalOtminutes).HasColumnName("TotalOTMinutes");
            entity.Property(e => e.WorkDescription)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.RoleId).HasName("PK__Role__8AFACE3A7BCE6EB3");

            entity.ToTable("Role");

            entity.HasIndex(e => e.RoleName, "UQ__Role__8A2B616055CB4C5A").IsUnique();

            entity.Property(e => e.RoleId).HasColumnName("RoleID");
            entity.Property(e => e.RoleName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<RolePermission>(entity =>
        {
            entity.HasKey(e => e.RoleId).HasName("PK__RolePerm__8AFACE3A3E52886B");

            entity.ToTable("RolePermission");

            entity.Property(e => e.RoleId)
                .ValueGeneratedNever()
                .HasColumnName("RoleID");

            entity.HasOne(d => d.Role).WithOne(p => p.RolePermission)
                .HasForeignKey<RolePermission>(d => d.RoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__RolePermi__RoleI__3BCADD1B");
        });

        modelBuilder.Entity<ServiceDescription>(entity =>
        {
            entity.HasKey(e => e.ServiceId).HasName("PK__ServiceD__C51BB0EAFE16C469");

            entity.ToTable("ServiceDescription");

            entity.Property(e => e.ServiceId).HasColumnName("ServiceID");
            entity.Property(e => e.BillingId).HasColumnName("BillingID");
            entity.Property(e => e.Cost).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.ServiceDescription1)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ServiceDescription");

            entity.HasOne(d => d.Billing).WithMany(p => p.ServiceDescriptions)
                .HasForeignKey(d => d.BillingId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ServiceDe__Billi__208CD6FA");
        });

        modelBuilder.Entity<Technician>(entity =>
        {
            entity.HasKey(e => e.TechnicianId).HasName("PK__Technici__301F82C1FBE61792");

            entity.ToTable("Technician");

            entity.Property(e => e.TechnicianId).HasColumnName("TechnicianID");
            entity.Property(e => e.HourlyRate).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Notes).IsUnicode(false);
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.ShiftAvailibility)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WorkStatus)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.Person).WithMany(p => p.Technicians)
                .HasForeignKey(d => d.PersonId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Technicia__Perso__3587F3E0");
        });

        modelBuilder.Entity<TechnicianExperience>(entity =>
        {
            entity.HasKey(e => e.ExperienceId).HasName("PK__Technici__2F4E3469AB34B49A");

            entity.ToTable("TechnicianExperience");

            entity.Property(e => e.ExperienceId).HasColumnName("ExperienceID");
            entity.Property(e => e.CertificatePdf).HasColumnName("CertificatePDF");
            entity.Property(e => e.CertificateUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CertificateURL");
            entity.Property(e => e.SkillName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TechnicianId).HasColumnName("TechnicianID");

            entity.HasOne(d => d.Technician).WithMany(p => p.TechnicianExperiences)
                .HasForeignKey(d => d.TechnicianId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Technicia__Techn__4F47C5E3");
        });

        modelBuilder.Entity<TechnicianLicence>(entity =>
        {
            entity.HasKey(e => e.LicenseId).HasName("PK__Technici__72D600A2531F22DA");

            entity.Property(e => e.LicenseId).HasColumnName("LicenseID");
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.IssuedDate).HasColumnType("datetime");
            entity.Property(e => e.LicenceUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("LicenceURL");
            entity.Property(e => e.LicenseName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TechnicianId).HasColumnName("TechnicianID");

            entity.HasOne(d => d.Technician).WithMany(p => p.TechnicianLicences)
                .HasForeignKey(d => d.TechnicianId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Technicia__Techn__5224328E");
        });

        modelBuilder.Entity<TechnicianWorkOrder>(entity =>
        {
            entity.HasKey(e => e.TechnicianWorkOrderId).HasName("PK__Technici__7529718EADC1A1AC");

            entity.ToTable("TechnicianWorkOrder");

            entity.Property(e => e.TechnicianWorkOrderId).HasColumnName("TechnicianWorkOrderID");
            entity.Property(e => e.SheetId).HasColumnName("SheetID");
            entity.Property(e => e.TechnicianId).HasColumnName("TechnicianID");

            entity.HasOne(d => d.Sheet).WithMany(p => p.TechnicianWorkOrders)
                .HasForeignKey(d => d.SheetId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_TechnicianWorkOrder_SheetID");

            entity.HasOne(d => d.Technician).WithMany(p => p.TechnicianWorkOrders)
                .HasForeignKey(d => d.TechnicianId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TechnicianWorkOrder_Technician");
        });

        modelBuilder.Entity<VehicleDatum>(entity =>
        {
            entity.HasKey(e => e.VehicleId).HasName("PK__VehicleD__476B54B26AF0B11C");

            entity.Property(e => e.VehicleId).HasColumnName("VehicleID");
            entity.Property(e => e.SamsaraVehicleId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SamsaraVehicleID");
            entity.Property(e => e.VehicleName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.VehicleVin)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VehicleVIN");
        });

        modelBuilder.Entity<VehicleHistory>(entity =>
        {
            entity.HasKey(e => e.VehicleHistoryId).HasName("PK__VehicleH__A3B543D5CA216E56");

            entity.ToTable("VehicleHistory");

            entity.Property(e => e.VehicleHistoryId).HasColumnName("VehicleHistoryID");
            entity.Property(e => e.TravelTotal).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.VehicleId).HasColumnName("VehicleID");

            entity.HasOne(d => d.Vehicle).WithMany(p => p.VehicleHistories)
                .HasForeignKey(d => d.VehicleId)
                .HasConstraintName("FK_VehicleHistory_VehicleID");
        });

        modelBuilder.Entity<VehicleTravelLog>(entity =>
        {
            entity.HasKey(e => e.VehicleTravelId).HasName("PK__VehicleT__30F5990CA15D4699");

            entity.ToTable("VehicleTravelLog");

            entity.Property(e => e.VehicleTravelId).HasColumnName("VehicleTravelID");
            entity.Property(e => e.DateTimeEnd).HasColumnType("datetime");
            entity.Property(e => e.DateTimeStart).HasColumnType("datetime");
            entity.Property(e => e.EndingLocation)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.KmatEnd)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("KMAtEnd");
            entity.Property(e => e.KmatStart)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("KMAtStart");
            entity.Property(e => e.StartingLocation)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.TotalKms).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.VehicleId).HasColumnName("VehicleID");
            entity.Property(e => e.VehicleWorkOrderId).HasColumnName("VehicleWorkOrderID");

            entity.HasOne(d => d.VehicleWorkOrder).WithMany(p => p.VehicleTravelLogs)
                .HasForeignKey(d => d.VehicleWorkOrderId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_VehicleTravelLog_VehicleWorkOrderID");
        });

        modelBuilder.Entity<VehicleWorkOrder>(entity =>
        {
            entity.HasKey(e => e.VehicleWorkOrderId).HasName("PK__VehicleW__B975A16A4016301D");

            entity.ToTable("VehicleWorkOrder");

            entity.Property(e => e.VehicleWorkOrderId).HasColumnName("VehicleWorkOrderID");
            entity.Property(e => e.SheetId).HasColumnName("SheetID");
            entity.Property(e => e.VehicleId).HasColumnName("VehicleID");

            entity.HasOne(d => d.Sheet).WithMany(p => p.VehicleWorkOrders)
                .HasForeignKey(d => d.SheetId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_VehicleWorkOrder_SheetID");

            entity.HasOne(d => d.Vehicle).WithMany(p => p.VehicleWorkOrders)
                .HasForeignKey(d => d.VehicleId)
                .HasConstraintName("FK_VehicleWorkOrder_VehicleID");
        });

        modelBuilder.Entity<VwPartsUsedWithInventory>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_PartsUsedWithInventory");

            entity.Property(e => e.AverageCost).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Cost).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.InventoryId).HasColumnName("InventoryID");
            entity.Property(e => e.ItemName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ManufacturerPartNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Notes).IsUnicode(false);
            entity.Property(e => e.QuickBooksInvId)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SalesPrice).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.SheetId).HasColumnName("SheetID");
        });

        modelBuilder.Entity<VwRole>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwRoles");

            entity.Property(e => e.FirstName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.RoleId).HasColumnName("RoleID");
            entity.Property(e => e.RoleName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TechnicianId).HasColumnName("TechnicianID");
        });

        modelBuilder.Entity<VwRolesMin>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwRolesMin");

            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.RolePermissionId).HasColumnName("RolePermissionID");
            entity.Property(e => e.TechnicianId).HasColumnName("TechnicianID");
        });

        modelBuilder.Entity<VwWorkOrderCard>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwWorkOrderCards");

            entity.Property(e => e.ChildCustomerName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.DateTimeCompleted).HasColumnType("datetime");
            entity.Property(e => e.LastSyncEventType)
                .HasMaxLength(32)
                .IsUnicode(false);
            entity.Property(e => e.ParentCustomerName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.PathToRoot)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SheetId).HasColumnName("SheetID");
            entity.Property(e => e.UnitNo)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.WorkDescription).IsUnicode(false);
            entity.Property(e => e.WorkOrderStatus)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwWorkOrderStatusWithType>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_WorkOrderStatusWithType");

            entity.Property(e => e.HexColor).HasMaxLength(7);
            entity.Property(e => e.IconName).HasMaxLength(50);
            entity.Property(e => e.StatusId).HasColumnName("StatusID");
            entity.Property(e => e.StatusName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TypeId).HasColumnName("TypeID");
            entity.Property(e => e.TypeName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwWorkOrderTechnician>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_WorkOrderTechnicians");

            entity.Property(e => e.FirstName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SheetId).HasColumnName("SheetID");
            entity.Property(e => e.TechnicianId).HasColumnName("TechnicianID");
        });

        modelBuilder.Entity<WorkOrderCounter>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__WorkOrde__3214EC0781D9C1CC");

            entity.ToTable("WorkOrderCounter");

            entity.Property(e => e.LastModified)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<WorkOrderFee>(entity =>
        {
            entity.HasKey(e => e.WorkOrderFeeId).HasName("PK__WorkOrde__0A62BD89EEAB0375");

            entity.Property(e => e.WorkOrderFeeId).HasColumnName("WorkOrderFeeID");
            entity.Property(e => e.FlatLabourId).HasColumnName("FlatLabourID");
            entity.Property(e => e.LabourTypeId).HasColumnName("LabourTypeID");
            entity.Property(e => e.TechnicianWorkOrderId).HasColumnName("TechnicianWorkOrderID");
            entity.Property(e => e.WorkDescription).IsUnicode(false);

            entity.HasOne(d => d.FlatLabour).WithMany(p => p.WorkOrderFees)
                .HasForeignKey(d => d.FlatLabourId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__WorkOrder__FlatL__019E3B86");

            entity.HasOne(d => d.LabourType).WithMany(p => p.WorkOrderFees)
                .HasForeignKey(d => d.LabourTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__WorkOrder__Labou__02925FBF");

            entity.HasOne(d => d.TechnicianWorkOrder).WithMany(p => p.WorkOrderFees)
                .HasForeignKey(d => d.TechnicianWorkOrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__WorkOrder__Techn__038683F8");
        });

        modelBuilder.Entity<WorkOrderSheet>(entity =>
        {
            entity.HasKey(e => e.SheetId).HasName("PK__WorkOrde__30B2738861CB949F");

            entity.ToTable("WorkOrderSheet");

            entity.Property(e => e.SheetId).HasColumnName("SheetID");
            entity.Property(e => e.DateTimeCompleted)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DateTimeCreated).HasColumnType("datetime");
            entity.Property(e => e.DateTimeStarted)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.WorkDescription).IsUnicode(false);
            entity.Property(e => e.WorkOrderStatus)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.CompletedByNavigation).WithMany(p => p.WorkOrderSheets)
                .HasForeignKey(d => d.CompletedBy)
                .HasConstraintName("FK_WorkOrderSheet_CompletedBy_Technicians");
        });

        modelBuilder.Entity<WorkOrderStatus>(entity =>
        {
            entity.HasKey(e => e.StatusId).HasName("PK__WorkOrde__C8EE20432C030B1A");

            entity.ToTable("WorkOrderStatus");

            entity.Property(e => e.StatusId).HasColumnName("StatusID");
            entity.Property(e => e.DateTimeCreated)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.HexColor)
                .IsRequired()
                .HasMaxLength(7)
                .HasDefaultValueSql("('#000000')");
            entity.Property(e => e.IconName)
                .IsRequired()
                .HasMaxLength(50)
                .HasDefaultValueSql("('info')");
            entity.Property(e => e.StatusName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WorkOrdTypeId).HasColumnName("WorkOrdTypeID");

            entity.HasOne(d => d.WorkOrdType).WithMany(p => p.WorkOrderStatuses)
                .HasForeignKey(d => d.WorkOrdTypeId)
                .HasConstraintName("FK_WorkOrderStatus_WorkOrderType");
        });

        modelBuilder.Entity<WorkOrderStatusSetup>(entity =>
        {
            entity.HasKey(e => e.StatusId).HasName("PK__WorkOrde__C8EE2043B902B393");

            entity.ToTable("WorkOrderStatusSetup");

            entity.Property(e => e.StatusId).HasColumnName("StatusID");
            entity.Property(e => e.HexColor)
                .IsRequired()
                .HasMaxLength(7);
            entity.Property(e => e.IconName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.StatusName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<WorkOrderSyncEvent>(entity =>
        {
            entity.HasKey(e => e.LogId).HasName("PK__WorkOrde__5E5499A848EEE05F");

            entity.Property(e => e.LogId).HasColumnName("LogID");
            entity.Property(e => e.DeviceId)
                .IsRequired()
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("DeviceID");
            entity.Property(e => e.EventType)
                .IsRequired()
                .HasMaxLength(32)
                .IsUnicode(false);
            entity.Property(e => e.SheetId).HasColumnName("SheetID");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<WorkOrderSyncLog>(entity =>
        {
            entity.HasKey(e => e.LogId).HasName("PK__WorkOrde__5E5499A874179401");

            entity.ToTable("WorkOrderSyncLog");

            entity.HasIndex(e => new { e.SheetId, e.DeviceId }, "IX_WorkOrderSyncLog_Sheet_Device").IsUnique();

            entity.Property(e => e.LogId).HasColumnName("LogID");
            entity.Property(e => e.DeviceId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DeviceID");
            entity.Property(e => e.SheetId).HasColumnName("SheetID");
            entity.Property(e => e.SyncedOn).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.Sheet).WithMany(p => p.WorkOrderSyncLogs)
                .HasForeignKey(d => d.SheetId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WorkOrderSyncLog_Sheet");
        });

        modelBuilder.Entity<WorkOrderType>(entity =>
        {
            entity.HasKey(e => e.TypeId).HasName("PK__WorkOrde__516F0395B4AD1E39");

            entity.ToTable("WorkOrderType");

            entity.Property(e => e.TypeId).HasColumnName("TypeID");
            entity.Property(e => e.DateTimeCreated)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.HexColor)
                .IsRequired()
                .HasMaxLength(7)
                .HasDefaultValueSql("('#000000')");
            entity.Property(e => e.IconName)
                .IsRequired()
                .HasMaxLength(50)
                .HasDefaultValueSql("('info')");
            entity.Property(e => e.TypeName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasMany(d => d.Statuses).WithMany(p => p.WorkOrdTypes)
                .UsingEntity<Dictionary<string, object>>(
                    "WorkOrderTypeStatus",
                    r => r.HasOne<WorkOrderStatus>().WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_WorkOrderStatus"),
                    l => l.HasOne<WorkOrderType>().WithMany()
                        .HasForeignKey("WorkOrdTypeId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_WorkOrderType"),
                    j =>
                    {
                        j.HasKey("WorkOrdTypeId", "StatusId");
                        j.ToTable("WorkOrderType_Status");
                        j.IndexerProperty<int>("WorkOrdTypeId").HasColumnName("WorkOrdTypeID");
                        j.IndexerProperty<int>("StatusId").HasColumnName("StatusID");
                    });
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}